import { ChangeEvent, useEffect, useRef, useState } from "react";
import useConfig from "../../../hooks/useConfig";


interface IProps {
    quote: string;
    disabled: boolean;
    removeLimit?: boolean;
    sendKeystroke: (keystroke: string, event: boolean) => void;
    sendWord: (word: string) => void;
    isSuddenDeath?: boolean;
  }

const MatchTextContainer = (props: IProps) => {

    // Props 
    const { quote, disabled, removeLimit, sendKeystroke, sendWord, isSuddenDeath } = props;

    // Refs 
    const refreshFPS = useRef<NodeJS.Timer | null>(null);
    const caretElement = useRef<HTMLDivElement | null>(null);
    const currentElement = useRef<HTMLDivElement | null>(null);

    // Config
    const { 
        smoothCaret, smoothCaretSpeed, 
        matchTextType, matchContainerTransparent,
        hideInputBox, colorBlindMode, 
        upscaleMatch, upscaleMatchContainer 
    } = useConfig();

    // States
    const [ correct, setCorrect ] = useState<string>('');
    const [ current, setCurrent ] = useState<string>('');
    const [ next, setNext ] = useState<string>('');

    const [ typoIndex, setTypoIndex ] = useState<number>(0);

    // Effect State Hooks
    useEffect(() => {
        if (!refreshFPS.current) 
            refreshFPS.current = setInterval(onRefreshFPS, 6);
        return () => {
            if (refreshFPS.current) clearInterval(refreshFPS.current);
        }
    }, [ ]);

    // Functions
    const onChange = (e: ChangeEvent<HTMLInputElement>) => {
        const quoteLength = quote.length;
        const keystroke = e.target.value;

        
    }

    // Timers
    const onRefreshFPS = () => {
        if (caretElement.current) {
            caretElement.current.style.left = `${currentElement.current!.offsetLeft}px`;
            caretElement.current.style.top = `${currentElement.current!.offsetTop}px`;
        }
    }

    // CSS Inlines 
    // For Tailwind Purge: duration-50 duration-75 duration-100 duration-150 duration-175 duration-200
    let smoothCaretCSS = smoothCaret === '1' ? `transition-all ease-out duration-${smoothCaretSpeed}` : '';
    let upscaleMatchCSS = upscaleMatch === '1' ? 'text-base sm:text-lg md:text-xl lg:text-2xl' : 'text-sm sm:text-base md:text-lg lg:text-xl';
    let matchTextTypeCSS = matchTextType === '1' ? 'font-mono' : 'font-sans';
    let colorBlindCSS = colorBlindMode === '1' ? 'bg-blue-600 bg-opacity-40 text-white' : 'bg-red-600 bg-opacity-40 text-white'

    return (
        <>
            <div className="match--text--container relative pointer-events-none">
                <div className={`match--text ${matchTextTypeCSS || ''} ${upscaleMatchCSS || ''}`}>
                    <div ref={caretElement} className={`${smoothCaretCSS} absolute`} style={{ width: '2px', height: '16px', left: 0, top: 0, transform: 'scale(1.3)', background: '#FB923C' }} />
                    <span className="match--letter match--correct">{correct}</span>
                    <span ref={currentElement} className={`match--letter match--letter`}>{current}</span>
                    <span className="match--letter text-gray-400">{next}</span>
                </div>
                <input
                    className={`match--input ${colorBlindCSS || ''}`}
                    lang="en"
                    type="text"
                    name="textInput"
                    placeholder={disabled ? 'Type your text in here...' : ''}
                    autoComplete="nope"
                    autoCorrect="off"
                    autoCapitalize="off"
                    spellCheck="false"
                    onChange={onChange}
                    onPaste={(e) => e.preventDefault()}
                    value={props.quote}
                    maxLength={removeLimit ? 2000 : 50}
                    formNoValidate
                    disabled={disabled}
                />
            </div>
        </>
    )
}

export default MatchTextContainer;
